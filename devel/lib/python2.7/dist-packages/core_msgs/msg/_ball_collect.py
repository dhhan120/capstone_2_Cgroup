# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from core_msgs/ball_collect.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ball_collect(genpy.Message):
  _md5sum = "e8e206387738aa9c55a76f978c327046"
  _type = "core_msgs/ball_collect"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

float32 data00
float32 data01
float32 data02
float32 data03
float32 data04
float32 data05
float32 data06
float32 data07
float32 data08
float32 data09
float32 data10
float32 data11
float32 data12
float32 data13
float32 data14
float32 data15
float32 data16
float32 data17
float32 data18
float32 data19
float32 data20
float32 data21
float32 data22
float32 data23
int32 pick_start

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','data00','data01','data02','data03','data04','data05','data06','data07','data08','data09','data10','data11','data12','data13','data14','data15','data16','data17','data18','data19','data20','data21','data22','data23','pick_start']
  _slot_types = ['std_msgs/Header','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,data00,data01,data02,data03,data04,data05,data06,data07,data08,data09,data10,data11,data12,data13,data14,data15,data16,data17,data18,data19,data20,data21,data22,data23,pick_start

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ball_collect, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.data00 is None:
        self.data00 = 0.
      if self.data01 is None:
        self.data01 = 0.
      if self.data02 is None:
        self.data02 = 0.
      if self.data03 is None:
        self.data03 = 0.
      if self.data04 is None:
        self.data04 = 0.
      if self.data05 is None:
        self.data05 = 0.
      if self.data06 is None:
        self.data06 = 0.
      if self.data07 is None:
        self.data07 = 0.
      if self.data08 is None:
        self.data08 = 0.
      if self.data09 is None:
        self.data09 = 0.
      if self.data10 is None:
        self.data10 = 0.
      if self.data11 is None:
        self.data11 = 0.
      if self.data12 is None:
        self.data12 = 0.
      if self.data13 is None:
        self.data13 = 0.
      if self.data14 is None:
        self.data14 = 0.
      if self.data15 is None:
        self.data15 = 0.
      if self.data16 is None:
        self.data16 = 0.
      if self.data17 is None:
        self.data17 = 0.
      if self.data18 is None:
        self.data18 = 0.
      if self.data19 is None:
        self.data19 = 0.
      if self.data20 is None:
        self.data20 = 0.
      if self.data21 is None:
        self.data21 = 0.
      if self.data22 is None:
        self.data22 = 0.
      if self.data23 is None:
        self.data23 = 0.
      if self.pick_start is None:
        self.pick_start = 0
    else:
      self.header = std_msgs.msg.Header()
      self.data00 = 0.
      self.data01 = 0.
      self.data02 = 0.
      self.data03 = 0.
      self.data04 = 0.
      self.data05 = 0.
      self.data06 = 0.
      self.data07 = 0.
      self.data08 = 0.
      self.data09 = 0.
      self.data10 = 0.
      self.data11 = 0.
      self.data12 = 0.
      self.data13 = 0.
      self.data14 = 0.
      self.data15 = 0.
      self.data16 = 0.
      self.data17 = 0.
      self.data18 = 0.
      self.data19 = 0.
      self.data20 = 0.
      self.data21 = 0.
      self.data22 = 0.
      self.data23 = 0.
      self.pick_start = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_24fi().pack(_x.data00, _x.data01, _x.data02, _x.data03, _x.data04, _x.data05, _x.data06, _x.data07, _x.data08, _x.data09, _x.data10, _x.data11, _x.data12, _x.data13, _x.data14, _x.data15, _x.data16, _x.data17, _x.data18, _x.data19, _x.data20, _x.data21, _x.data22, _x.data23, _x.pick_start))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.data00, _x.data01, _x.data02, _x.data03, _x.data04, _x.data05, _x.data06, _x.data07, _x.data08, _x.data09, _x.data10, _x.data11, _x.data12, _x.data13, _x.data14, _x.data15, _x.data16, _x.data17, _x.data18, _x.data19, _x.data20, _x.data21, _x.data22, _x.data23, _x.pick_start,) = _get_struct_24fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_24fi().pack(_x.data00, _x.data01, _x.data02, _x.data03, _x.data04, _x.data05, _x.data06, _x.data07, _x.data08, _x.data09, _x.data10, _x.data11, _x.data12, _x.data13, _x.data14, _x.data15, _x.data16, _x.data17, _x.data18, _x.data19, _x.data20, _x.data21, _x.data22, _x.data23, _x.pick_start))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 100
      (_x.data00, _x.data01, _x.data02, _x.data03, _x.data04, _x.data05, _x.data06, _x.data07, _x.data08, _x.data09, _x.data10, _x.data11, _x.data12, _x.data13, _x.data14, _x.data15, _x.data16, _x.data17, _x.data18, _x.data19, _x.data20, _x.data21, _x.data22, _x.data23, _x.pick_start,) = _get_struct_24fi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_24fi = None
def _get_struct_24fi():
    global _struct_24fi
    if _struct_24fi is None:
        _struct_24fi = struct.Struct("<24fi")
    return _struct_24fi
